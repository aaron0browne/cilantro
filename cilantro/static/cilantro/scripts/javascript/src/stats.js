// Generated by CoffeeScript 1.3.3

define(function() {
  var linearReg;
  return linearReg = function(xyr, xOptions, yOptions) {
    var i, l, offset, point, r, slope, sumr, sumx, sumx2, sumxy, sumy, sumy2, x, xfreq, xmax, xmin, xmode, y, yfreq, ymax, ymin, ymode, _i, _len;
    l = xyr.length;
    sumx = 0;
    sumy = 0;
    sumx2 = 0;
    sumy2 = 0;
    sumxy = 0;
    sumr = 0;
    xfreq = {};
    yfreq = {};
    i = 0;
    for (_i = 0, _len = xyr.length; _i < _len; _i++) {
      point = xyr[_i];
      x = point[0];
      y = point[1];
      r = point[2] || 1;
      if (typeof xmin === "undefined" || xmin === null) {
        xmin = x;
        xmax = x;
        ymin = y;
        ymax = y;
      } else {
        xmin = Math.min(xmin, x);
        xmax = Math.max(xmax, x);
        ymin = Math.min(ymin, y);
        ymax = Math.max(ymax, y);
      }
      if (!xfreq[x]) {
        xfreq[x] = 0;
      }
      if (!yfreq[y]) {
        yfreq[y] = 0;
      }
      xfreq[x]++;
      yfreq[y]++;
      if (typeof xmode === "undefined" || xmode === null) {
        xmode = x;
        ymode = y;
      } else {
        if (xfreq[x] > xfreq[xmode]) {
          xmode = x;
        }
        if (yfreq[y] > yfreq[ymode]) {
          ymode = y;
        }
      }
      sumr += r;
      sumx += r * x;
      sumx2 += r * (x * x);
      sumy += r * y;
      sumy2 += r * (y * y);
      sumxy += r * (x * y);
    }
    offset = (sumy * sumx2 - sumx * sumxy) / (sumr * sumx2 - sumx * sumx);
    slope = (sumr * sumxy - sumx * sumy) / (sumr * sumx2 - sumx * sumx);
    return {
      slope: slope,
      offset: offset,
      x: {
        min: xmin,
        max: xmax,
        line: [[xmin, slope * xmin + offset], [xmax, slope * xmax + offset]],
        mode: xmode,
        modePoint: [xmode, slope * xmode + offset]
      },
      y: {
        min: ymin,
        max: ymax,
        line: [[(ymin - offset) / slope, ymin], [(ymax - offset) / slope, ymax]],
        mode: ymode,
        modePoint: [(ymode - offset) / slope, ymode]
      }
    };
  };
});
