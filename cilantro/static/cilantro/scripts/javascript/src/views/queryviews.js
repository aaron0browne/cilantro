// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['environ', 'mediator', 'jquery', 'underscore', 'backbone', 'views/charts', 'forms/controls'], function(environ, mediator, $, _, Backbone, Charts, Controls) {
  var QueryView, QueryViewsAccordian, QueryViewsPanel, QueryViewsSearchForm;
  QueryView = (function(_super) {

    __extends(QueryView, _super);

    function QueryView() {
      this.update = __bind(this.update, this);

      this.hide = __bind(this.hide, this);

      this.show = __bind(this.show, this);
      return QueryView.__super__.constructor.apply(this, arguments);
    }

    QueryView.prototype.template = _.template('\
            <div class="area-container queryview">\
                <h3 class=heading>\
                    {{ name }} <small>{{ category }}</small>\
                </h3>\
                <div class=btn-toolbar>\
                    <button data-toggle=detail class="btn btn-small"><i class=icon-info-sign></i></button>\
                </div>\
                <div class=details>\
                    <div class=description>{{ description }}</div>\
                </div>\
                <form class=form-inline>\
                </form>\
            </div>\
        ');

    QueryView.prototype.events = {
      'click [data-toggle=detail]': 'toggleDetail'
    };

    QueryView.prototype.deferred = {
      'update': true
    };

    QueryView.prototype.initialize = function() {
      var attrs, cat,
        _this = this;
      QueryView.__super__.initialize.apply(this, arguments);
      attrs = {
        name: this.model.get('name'),
        category: (cat = this.model.get('category')) ? cat.name : '',
        description: this.model.get('description')
      };
      this.setElement(this.template(attrs));
      this.$heading = this.$('.heading');
      this.$details = this.$('.details');
      this.$form = this.$('form');
      mediator.subscribe('queryview/show', function(id) {
        if (_this.model.id === id) {
          return _this.show();
        }
      });
      return this.render();
    };

    QueryView.prototype.toggleDetail = function() {
      if (this.$details.is(':visible')) {
        return this.$details.slideUp(300);
      } else {
        return this.$details.slideDown(300);
      }
    };

    QueryView.prototype.render = function() {
      var $charts, $controls, chart, conditions, control, controlClass, data, fields, model, options, _i, _len, _ref, _results;
      fields = new Backbone.Collection(this.model.get('fields'));
      this.controls = [];
      this.charts = [];
      options = {
        label: fields.length === 1 ? false : true
      };
      _ref = fields.models;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        options.model = model;
        $controls = $('<div class=span6></div>');
        $charts = $('<div class="span6 charts"></div>');
        if ((data = model.get('data')).searchable) {
          controlClass = Controls.SearchableControl;
        } else if (data.enumerable) {
          controlClass = Controls.EnumerableControl;
        } else if (data.type === 'number') {
          controlClass = Controls.NumberControl;
        } else {
          controlClass = Controls.Control;
        }
        chart = new Charts.Distribution({
          editable: false,
          data: {
            context: null
          }
        });
        this.controls.push((control = new controlClass(options)));
        this.charts.push([model, chart]);
        $controls.append(control.render().$el);
        $charts.append(chart.$el);
        if ((conditions = App.DataContext.session.getNodes(model.id)) && conditions[0]) {
          control.set(conditions[0]);
        }
        this.$form.append($('<div class=row-fluid>').append($controls, $charts));
        _results.push(this.update());
      }
      return _results;
    };

    QueryView.prototype.show = function() {
      var control, _i, _len, _ref;
      this.resolve();
      App.views.discover.$el.prepend(this.$el.detach());
      _ref = this.controls;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        control = _ref[_i];
        control.show();
      }
      return this;
    };

    QueryView.prototype.hide = function() {
      var control, _i, _len, _ref;
      this.pending();
      this.$el.detach();
      _ref = this.controls;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        control = _ref[_i];
        control.hide();
      }
      return this;
    };

    QueryView.prototype.update = function() {
      var chart, model, url, _i, _len, _ref, _ref1;
      _ref = this.charts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], model = _ref1[0], chart = _ref1[1];
        url = environ.absolutePath("/api/fields/" + model.id + "/dist/");
        chart.renderChart(url, null, [model]);
      }
    };

    return QueryView;

  })(Backbone.View);
  QueryViewsAccordian = (function(_super) {

    __extends(QueryViewsAccordian, _super);

    function QueryViewsAccordian() {
      return QueryViewsAccordian.__super__.constructor.apply(this, arguments);
    }

    QueryViewsAccordian.prototype.id = 'data-filters-accordian';

    QueryViewsAccordian.prototype.className = 'accordian';

    QueryViewsAccordian.prototype.grouptTemplate = _.template('\
            <div class=accordian-group>\
                <div class=accordian-heading>\
                    <a class=accordian-toggle data-toggle=collapse data-parent={{ parent }} href=#{{ slug }}>{{ name }}</a>\
                    <i class=icon-filter></i>\
                </div>\
                <div id={{ slug }} class="accordian-body collapse">\
                    <ul class=nav></ul>\
                </div>\
            </div> \
        ');

    QueryViewsAccordian.prototype.initialize = function() {
      var _this = this;
      return this.collection.deferred.done(function() {
        _this.render();
        return _this.collection.each(function(model, i) {
          if (model.get('queryview')) {
            return new QueryView({
              model: model
            });
          }
        });
      });
    };

    QueryViewsAccordian.prototype.events = {
      'click [data-toggle=queryview]': 'show'
    };

    QueryViewsAccordian.prototype.render = function() {
      var category, categoryName, group, groupName, id, model, _i, _len, _ref;
      this.$el.empty();
      _ref = this.collection.sortBy(function(model) {
        var category, _ref;
        return (_ref = (category = model.get('category'))) != null ? _ref.order : void 0;
      });
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        if (!model.get('queryview')) {
          continue;
        }
        category = model.get('category');
        categoryName = category ? category.name : 'Other';
        if (!groupName || categoryName !== groupName) {
          groupName = categoryName;
          id = this.$el.prop('id');
          group = $(this.grouptTemplate({
            name: groupName,
            parent: id,
            slug: "" + id + "-" + (groupName.toLowerCase())
          }));
          this.$el.append(group);
        }
        group.find('.nav').append($("<li><a href=# data-toggle=queryview data-target=" + model.id + ">" + (model.get('name')) + "</a> <i class=icon-filter></i></li>"));
      }
      return this;
    };

    QueryViewsAccordian.prototype.show = function(event) {
      event.preventDefault();
      return mediator.publish('queryview/show', $(event.target).data('target'));
    };

    return QueryViewsAccordian;

  })(Backbone.View);
  QueryViewsSearchForm = (function(_super) {

    __extends(QueryViewsSearchForm, _super);

    function QueryViewsSearchForm() {
      return QueryViewsSearchForm.__super__.constructor.apply(this, arguments);
    }

    QueryViewsSearchForm.prototype.template = _.template('\
            <form id=data-filters-search class=form-search action=>\
                <input class=search-query placeholder=Search>\
            </form>\
        ');

    QueryViewsSearchForm.prototype.events = {
      'keyup input': 'autocomplete',
      'submit': 'search'
    };

    QueryViewsSearchForm.prototype.initialize = function() {
      return this.setElement(this.template());
    };

    QueryViewsSearchForm.prototype.autocomplete = function() {};

    QueryViewsSearchForm.prototype.search = function() {};

    return QueryViewsSearchForm;

  })(Backbone.View);
  QueryViewsPanel = (function(_super) {

    __extends(QueryViewsPanel, _super);

    function QueryViewsPanel() {
      return QueryViewsPanel.__super__.constructor.apply(this, arguments);
    }

    QueryViewsPanel.prototype.template = _.template('\
            <div id=data-filters-panel class="panel panel-left scrollable-column closed">\
                <div class="inner panel-content"></div>\
                <div class=panel-toggle data-toggle=panel></div>\
            </div>\
        ');

    QueryViewsPanel.prototype.initialize = function() {
      this.setElement(this.template());
      this.$browser = new QueryViewsAccordian({
        collection: this.collection
      });
      this.$form = new QueryViewsSearchForm({
        collection: this.collection
      });
      this.$('.panel-content').append(this.$form.el, this.$browser.el);
      $('body').append(this.$el);
      return this.$el.panel();
    };

    return QueryViewsPanel;

  })(Backbone.View);
  return $(function() {
    return App.QueryViewsPanel = new QueryViewsPanel({
      collection: App.DataConcept
    });
  });
});
