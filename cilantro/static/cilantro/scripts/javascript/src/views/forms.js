// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['environ', 'jquery', 'underscore', 'backbone', 'templates'], function(environ, $, _, Backbone, Templates) {
  var ControlGroup, FilterControlGroup, FilterForm, MultiEnumControlGroup, NumberControlGroup, SingleEnumControlGroup;
  ControlGroup = (function(_super) {

    __extends(ControlGroup, _super);

    function ControlGroup() {
      return ControlGroup.__super__.constructor.apply(this, arguments);
    }

    ControlGroup.prototype.template = Templates.controlGroup;

    ControlGroup.prototype.initialize = function(options) {
      this.setElement(this.template());
      this.$label = this.$el.find('.control-label');
      this.$controls = this.$el.find('.controls');
      this.$helpBlock = this.$el.find('.help-block');
      return this.hasField = false;
    };

    ControlGroup.prototype.addField = function(el) {
      if (this.hasField) {
        return this.$controls.find('input,select').after(el);
      } else {
        this.$controls.prepend(el);
        return this.hasField = true;
      }
    };

    return ControlGroup;

  })(Backbone.View);
  FilterForm = (function(_super) {

    __extends(FilterForm, _super);

    function FilterForm() {
      return FilterForm.__super__.constructor.apply(this, arguments);
    }

    FilterForm.prototype.tagName = 'form';

    FilterForm.prototype.className = 'form-inline';

    FilterForm.prototype.events = {
      'submit': 'preventDefault',
      'click [name=filter]': 'applyFilter',
      'click [name=exclude]': 'applyExclude'
    };

    FilterForm.prototype.initialize = function() {
      var group, model, view, _i, _len, _ref;
      this.fieldsets = {};
      _ref = this.collection.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        if (model.get('data').enumerable) {
          view = new MultiEnumControlGroup({
            model: model
          });
        } else {
          view = new FilterControlGroup({
            model: model
          });
        }
        group = new ControlGroup;
        group.addField(view.$el);
        this.$el.append(group.$el);
        this.fieldsets[model.id] = view;
      }
      this.$controls = $('\
                <div class=form-controls>\
                    <button class="btn success" name=filter>Filter</button>\
                    <button class="btn danger" name=exclude>Exclude</button>\
                </div>\
            ');
      return this.$el.append(this.$controls);
    };

    FilterForm.prototype.preventDefault = function(event) {
      return event.preventDefault();
    };

    FilterForm.prototype.applyFilter = function() {};

    FilterForm.prototype.applyExclude = function() {};

    return FilterForm;

  })(Backbone.View);
  FilterControlGroup = (function(_super) {

    __extends(FilterControlGroup, _super);

    function FilterControlGroup() {
      return FilterControlGroup.__super__.constructor.apply(this, arguments);
    }

    FilterControlGroup.prototype.template = _.template('\
            <div class=control-group>\
                <label class=control-label>{{ label }}</label>\
                <div class=controls>\
                    <select class=span4 name=operator></select>\
                    <input class=span4 type={{ type }} name=value>\
                    <span class=units>{{ units }}</span>\
                    <p class=help-block>{{ help }}</p>\
                </div>\
            </div>\
        ');

    FilterControlGroup.prototype.typeMap = {
      'boolean': 'checkbox',
      'number': 'number',
      'string': 'text'
    };

    FilterControlGroup.prototype.initialize = function(options) {
      var attrs,
        _this = this;
      attrs = this.model.toJSON();
      this.setElement(this.template({
        label: attrs.name,
        help: attrs.description,
        type: this.typeMap[attrs.data.type],
        units: attrs.data.units
      }));
      this.operator = this.$el.find('[name=operator]');
      this.value = this.$el.find('[name=value]');
      return $.each(this.model.get('operators'), function(i, choice) {
        var option;
        option = $("<option value=\"" + choice[0] + "\">" + choice[1] + "</option>");
        return _this.operator.append(option);
      });
    };

    FilterControlGroup.prototype.render = function(filter) {
      if (filter) {
        this.filter = filter;
        this.setOperator();
        return this.setValue();
      }
    };

    FilterControlGroup.prototype.getOperator = function() {
      return this.operator.val();
    };

    FilterControlGroup.prototype.getValue = function() {
      return this.value.val();
    };

    FilterControlGroup.prototype.setOperator = function() {
      return this.operator.val(this.filter.get('operator'));
    };

    FilterControlGroup.prototype.setValue = function() {
      return this.value.val(filter.get('value'));
    };

    FilterControlGroup.prototype.applyFilter = function() {
      return this.filter.set({
        value: this.getValue(),
        operator: this.getOperator(),
        negate: false
      });
    };

    FilterControlGroup.prototype.applyExclude = function() {
      return this.filter.set({
        value: this.getValue(),
        operator: this.getOperator(),
        negate: true
      });
    };

    return FilterControlGroup;

  })(Backbone.View);
  NumberControlGroup = (function(_super) {

    __extends(NumberControlGroup, _super);

    function NumberControlGroup() {
      return NumberControlGroup.__super__.constructor.apply(this, arguments);
    }

    NumberControlGroup.prototype.events = {
      'change [name=operator]': 'toggleOperator'
    };

    NumberControlGroup.prototype.initialize = function() {
      NumberControlGroup.__super__.initialize.apply(this, arguments);
      return this.value2 = this.$el.find('[name=value2]').hide();
    };

    NumberControlGroup.prototype.getValue = function() {
      if (/range/.test(this.getOperator())) {
        return [this.value.val(), this.value2.val()];
      } else {
        return this.value.val();
      }
    };

    NumberControlGroup.prototype.setValue = function() {
      var value;
      value = this.filter.get('value');
      if (/range/.test(this.filter.get('operator'))) {
        this.value.val(value[0]);
        return this.value2.val(value[1]);
      } else {
        return this.value.val(value);
      }
    };

    NumberControlGroup.prototype.toggleOperator = function() {
      if (/range/.test(this.getOperator())) {
        return this.value2.show();
      } else {
        return this.value2.hide();
      }
    };

    return NumberControlGroup;

  })(FilterControlGroup);
  SingleEnumControlGroup = (function(_super) {

    __extends(SingleEnumControlGroup, _super);

    function SingleEnumControlGroup() {
      return SingleEnumControlGroup.__super__.constructor.apply(this, arguments);
    }

    SingleEnumControlGroup.prototype.initialize = function(options) {
      var _this = this;
      SingleEnumControlGroup.__super__.initialize.apply(this, arguments);
      return $.each(this.model.get('data').choices, function(i, choice) {
        var option;
        option = $("<option value=\"" + choice[0] + "\">" + choice[1] + "</option>");
        return _this.value.append(option);
      });
    };

    SingleEnumControlGroup.prototype.getOperator = function() {
      return 'in';
    };

    return SingleEnumControlGroup;

  })(FilterControlGroup);
  MultiEnumControlGroup = (function(_super) {

    __extends(MultiEnumControlGroup, _super);

    function MultiEnumControlGroup() {
      return MultiEnumControlGroup.__super__.constructor.apply(this, arguments);
    }

    MultiEnumControlGroup.prototype.template = _.template('\
            <select name=value multiple></select>\
        ');

    return MultiEnumControlGroup;

  })(SingleEnumControlGroup);
  return {
    FilterForm: FilterForm,
    FilterControlGroup: FilterControlGroup,
    NumberControlGroup: NumberControlGroup,
    SingleEnumControlGroup: SingleEnumControlGroup,
    MultiEnumControlGroup: MultiEnumControlGroup
  };
});
