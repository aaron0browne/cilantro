// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['environ', 'jquery', 'underscore', 'backbone', 'session'], function(environ, $, _, Backbone, session) {
  var ROUTING, Router;
  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.initialize = function() {
      $('body').on('click', '[data-route]', function(event) {
        event.preventDefault();
        return App.router.navigate(this.pathname, {
          trigger: true
        });
      });
      return $('.modal').modal({
        show: false
      });
    };

    return Router;

  })(Backbone.Router);
  App.router = new Router;
  App.views = {};
  App.loaded = [];
  ROUTING = false;
  return App.register = function(route, name, view) {
    var _this = this;
    if (App.views[name] != null) {
      throw new Error("" + name + " view already registered");
    }
    App.views[name] = view;
    if (route === false) {
      if (typeof view.load === "function") {
        view.load();
      }
      return;
    }
    this.router.route(route, name, function() {
      var _i, _len, _name, _ref, _ref1, _ref2;
      if (!ROUTING) {
        ROUTING = true;
        _ref = _this.loaded;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _name = _ref[_i];
          if ((_ref1 = App.views[_name]) != null) {
            if (typeof _ref1.unload === "function") {
              _ref1.unload();
            }
          }
        }
        _this.loaded = [];
        _.defer(function() {
          return ROUTING = false;
        });
      }
      if ((_ref2 = App.views[name]) != null) {
        if (typeof _ref2.load === "function") {
          _ref2.load();
        }
      }
      return _this.loaded.push(name);
    });
    return this.router.on("route:" + name, function() {
      var links;
      links = $('[data-route]');
      links.parent().removeClass('active');
      return links.filter("[data-route=" + name + "]").parent().addClass('active');
    });
  };
});
