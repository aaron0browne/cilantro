// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['environ', 'mediator', 'jquery', 'underscore', 'backbone'], function(environ, mediator, $, _, Backbone) {
  var Control, DEFAULT_EVENTS, EnumerableControl, NEGATION_OPERATORS, NumberControl, SearchableControl, formActionsTemplate;
  formActionsTemplate = _.template('\
        <div class=form-actions>\
            <button class="btn btn-mini btn-danger" name=exclude title="Exclude results from query">Exclude</button>\
            <button class="btn btn-mini btn-success" name=include title="Include results in query">Include</button>\
        </div>\
    ');
  NEGATION_OPERATORS = {};
  DEFAULT_EVENTS = {
    'submit': 'preventDefault',
    'click [name=include]': 'submitInclude',
    'click [name=exclude]': 'submitExclude',
    'mouseenter': 'showActions',
    'mouseleave': 'hideActions',
    'change [name=operator]': 'toggleActions'
  };
  Control = (function(_super) {

    __extends(Control, _super);

    function Control() {
      this.loadValues = __bind(this.loadValues, this);

      this.loadOperators = __bind(this.loadOperators, this);
      return Control.__super__.constructor.apply(this, arguments);
    }

    Control.prototype.template = _.template('\
            <div class=control-group>\
                <h4 class=control-label>{{ label }} <small class=units>({{ units }})</small></h4>\
                <div class=controls>\
                    <select class=span4 name=operator></select>\
                    <input class=span4 type=text name=value>\
                    <p class=help-block>{{ help }}</p>\
                </div>\
            </div>\
        ');

    Control.prototype.events = DEFAULT_EVENTS;

    Control.prototype.deferred = {
      'loadValues': true
    };

    Control.prototype.initialize = function(options) {
      var _this = this;
      Control.__super__.initialize.apply(this, arguments);
      this.options = options;
      mediator.subscribe("datacontext/" + this.model.id + "/edit", function(node) {
        if (node === _this.node) {
          return;
        }
        return _this.set(node);
      });
      return this.render();
    };

    Control.prototype.getTemplateData = function() {
      return {
        label: this.model.get('alt_name') || this.model.get('name'),
        units: this.model.get('data').plural_unit,
        help: this.model.get('description')
      };
    };

    Control.prototype.renderTemplate = function() {
      this.setElement(this.template(this.getTemplateData()));
      return this.$el.append(formActionsTemplate());
    };

    Control.prototype.render = function() {
      this.renderTemplate();
      this.$label = this.$('.control-label');
      this.$value = this.$('[name=value]');
      this.$operator = this.$('[name=operator]');
      this.$controls = this.$('.controls');
      this.$actions = this.$('.form-actions');
      this.$include = this.$('[name=include]');
      this.$exclude = this.$('[name=exclude]');
      if (this.options.label === false) {
        this.$label.hide();
      }
      if (!(this.getTemplateData().units)) {
        this.$('.units').hide();
      }
      this.loadOperators();
      this.loadValues();
      return this;
    };

    Control.prototype.show = function() {
      return this.resolve();
    };

    Control.prototype.hide = function() {
      return this.pending();
    };

    Control.prototype.preventDefault = function(event) {
      return event.preventDefault();
    };

    Control.prototype.showActions = function(event) {
      return this.$actions.fadeTo(200, 1);
    };

    Control.prototype.hideActions = function(event) {
      return this.$actions.fadeTo(400, 0.3);
    };

    Control.prototype.toggleActions = function(event) {
      if (NEGATION_OPERATORS[this.$operator.val()]) {
        return this.$exclude.prop('disabled', false);
      } else {
        return this.$exclude.prop('disabled', true);
      }
    };

    Control.prototype.submitInclude = function(event) {
      event.preventDefault();
      return this.submit(this.get());
    };

    Control.prototype.submitExclude = function(event) {
      event.preventDefault();
      return this.submit(this.get({
        negated: true
      }));
    };

    Control.prototype.validate = function() {};

    Control.prototype.loadOperators = function() {
      var operator, operators, text, _i, _len, _ref, _ref1;
      _ref = (operators = this.model.get('operators'));
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], operator = _ref1[0], text = _ref1[1];
        if (operator.charAt(0) === '-') {
          NEGATION_OPERATORS[operator.substr(1)] = operator;
          continue;
        }
        this.$operator.append("<option value=\"" + operator + "\">" + text + "</option>");
      }
      if (this.$operator.children().length === 1) {
        return this.$operator.hide();
      }
    };

    Control.prototype.loadValues = function() {
      return this.set();
    };

    Control.prototype.coerceValue = function(value) {
      var type;
      type = this.model.get('data').type;
      if (value === 'null') {
        return null;
      }
      switch (type) {
        case 'boolean':
          value = value === 'true' ? true : false;
          break;
        case 'number':
          value = parseFloat(value);
      }
      return value;
    };

    Control.prototype.getValue = function(options) {
      var val, value;
      if (this.$value.is('[type=checkbox],[type=radio]')) {
        value = this.$value.prop('checked');
      } else {
        value = this.$value.val();
        if (value === '' || value === null) {
          return;
        }
        if (this.$value.is('select')) {
          value = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = value.length; _i < _len; _i++) {
              val = value[_i];
              _results.push(this.coerceValue(val));
            }
            return _results;
          }).call(this);
        } else {
          value = this.coerceValue(value);
        }
      }
      return value;
    };

    Control.prototype.getOperator = function(options) {
      var operator;
      if (options == null) {
        options = {};
      }
      operator = this.$operator.val();
      if (options.negated && NEGATION_OPERATORS[operator]) {
        operator = NEGATION_OPERATORS[operator];
      }
      return operator;
    };

    Control.prototype.setValue = function(value) {
      if (this.$value.is('[type=checkbox],[type=radio]')) {
        return this.$value.prop('checked', value);
      } else {
        return this.$value.val(value);
      }
    };

    Control.prototype.setOperator = function(value) {
      this.$operator.val(value);
      return this.toggleActions();
    };

    Control.prototype.get = function(options) {
      return {
        id: this.model.id,
        operator: this.getOperator(options),
        value: this.getValue(options)
      };
    };

    Control.prototype.set = function(node) {
      var operator, value;
      node = node || this.node;
      if (!node) {
        return;
      }
      this.node = node;
      value = this.node.get('value');
      operator = this.node.get('operator');
      if (/^-/.test(operator)) {
        operator = operator.substr(1);
      }
      this.setOperator(operator);
      return this.setValue(value);
    };

    Control.prototype.submit = function(data) {
      var message;
      if (data.value === void 0) {
        if (this.node) {
          mediator.publish('datacontext/remove', this.node);
          delete this.node;
          return;
        }
      }
      if ((message = this.validate(data))) {
        this.trigger('error', message);
        return;
      }
      if (this.node) {
        this.node.set(data);
        return App.DataContext.session.save();
      } else {
        this.node = new App.Models.DataContextNode(data);
        return mediator.publish('datacontext/add', this.node);
      }
    };

    Control.prototype.clear = function() {
      delete this.node;
      this.setValue();
      return this.setOperator();
    };

    return Control;

  })(Backbone.View);
  _.extend(Control.prototype, Backbone.Events);
  NumberControl = (function(_super) {

    __extends(NumberControl, _super);

    function NumberControl() {
      return NumberControl.__super__.constructor.apply(this, arguments);
    }

    NumberControl.prototype.events = _.extend({}, DEFAULT_EVENTS, {
      'change [name=operator]': 'toggleOperator'
    });

    NumberControl.prototype.render = function() {
      NumberControl.__super__.render.apply(this, arguments);
      this.$controls.append((this.$value2 = this.$('[name=value-2]').hide()));
      return this;
    };

    NumberControl.prototype.getValue = function(options) {
      var value, value2;
      if ((value = NumberControl.__super__.getValue.apply(this, arguments))) {
        return;
      }
      if (/range/.test(this.getOperator())) {
        value2 = this.coerceValue(this.$value2.val());
        return [value, value2];
      } else {
        return value;
      }
    };

    NumberControl.prototype.setValue = function(value) {
      if (/range/.test(this.getOperator())) {
        this.$value.val(value[0]);
        return this.$value2.val(value[1]).show();
      } else {
        return this.$value.val(value);
      }
    };

    NumberControl.prototype.toggleOperator = function() {
      if (/range/.test(this.getOperator())) {
        return this.$value2.show();
      } else {
        return this.$value2.hide();
      }
    };

    return NumberControl;

  })(Control);
  EnumerableControl = (function(_super) {

    __extends(EnumerableControl, _super);

    function EnumerableControl() {
      this.loadValues = __bind(this.loadValues, this);

      this.loadOperators = __bind(this.loadOperators, this);
      return EnumerableControl.__super__.constructor.apply(this, arguments);
    }

    EnumerableControl.prototype.template = _.template('\
            <div class=control-group>\
                <h4 class=control-label>{{ label }} <small class=units>({{ units }})</small></h4>\
                <div class=controls>\
                    <select class=span4 name=operator></select>\
                    <select class=span12 name=value multiple=multiple></select>\
                    <p class=help-block>{{ help }}</p>\
                </div>\
            </div>\
        ');

    EnumerableControl.prototype.initialize = function() {
      EnumerableControl.__super__.initialize.apply(this, arguments);
      return mediator.subscribe('datacontext/change', this.loadValues);
    };

    EnumerableControl.prototype.loadOperators = function() {
      var operator, operators, text, _i, _len, _ref, _ref1;
      NEGATION_OPERATORS['-in'] = 'in';
      _ref = (operators = this.model.get('operators'));
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], operator = _ref1[0], text = _ref1[1];
        if (operator === 'in') {
          this.$operator.append("<option value=\"" + operator + "\">" + text + "</option>");
          break;
        }
      }
      return this.$operator.hide();
    };

    EnumerableControl.prototype.loadValues = function() {
      var _this = this;
      return Backbone.ajax({
        url: environ.absolutePath(this.model.get('links').values.href),
        success: function(resp) {
          var obj, _i, _len;
          _this.$value.empty();
          for (_i = 0, _len = resp.length; _i < _len; _i++) {
            obj = resp[_i];
            _this.$value.append("<option value=\"" + obj.value + "\">" + obj.name + " (" + obj.count + ")</option>");
          }
          return _this.set();
        }
      });
    };

    return EnumerableControl;

  })(Control);
  SearchableControl = (function(_super) {

    __extends(SearchableControl, _super);

    function SearchableControl() {
      this.loadValues = __bind(this.loadValues, this);
      return SearchableControl.__super__.constructor.apply(this, arguments);
    }

    SearchableControl.prototype.loadValues = function() {};

    return SearchableControl;

  })(EnumerableControl);
  return {
    Control: Control,
    NumberControl: NumberControl,
    EnumerableControl: EnumerableControl,
    SearchableControl: SearchableControl
  };
});
