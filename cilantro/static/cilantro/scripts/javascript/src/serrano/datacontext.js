// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

define(['underscore', 'backbone'], function(_, Backbone) {
  var DataContext, DataContextNode, DataContexts;
  DataContextNode = (function(_super) {

    __extends(DataContextNode, _super);

    function DataContextNode() {
      return DataContextNode.__super__.constructor.apply(this, arguments);
    }

    DataContextNode.prototype.validate = function(attrs) {
      var key, value;
      delete this.type;
      if (attrs.type !== void 0) {
        if (attrs.type !== 'and' && attrs.type !== 'or') {
          return 'Invalid logical operator between nodes';
        }
        if (!attrs.children || attrs.children.length < 2) {
          return 'Branch nodes must contain two or more child nodes';
        }
        this.type = 'branch';
      } else if (attrs.operator !== void 0) {
        if (!(attrs.id != null) || attrs.value === void 0) {
          return 'Condition nodes must have id, operator and value attributes';
        }
        this.type = 'condition';
      } else if (attrs.composite === true) {
        if (!(attrs.id != null)) {
          return 'Composite nodes must have an id attribute';
        }
        this.type = 'composite';
      } else {
        for (key in attrs) {
          value = attrs[key];
          if (value !== void 0) {
            return 'Unknown node type';
          }
        }
      }
    };

    DataContextNode.prototype.toJSON = function() {
      var json;
      if (this.type === 'branch') {
        json = {
          type: this.get('type'),
          children: _.map(this.get('children'), function(model) {
            return model.toJSON();
          })
        };
      } else {
        json = DataContextNode.__super__.toJSON.apply(this, arguments);
      }
      return json;
    };

    DataContextNode.prototype.siblings = function() {
      if (this.root) {
        return false;
      } else {
        return _.without(this.parent.get('children'), this);
      }
    };

    DataContextNode.prototype.remove = function(node) {
      var children, idx;
      if (this.root) {
        return false;
      }
      if (node) {
        if (this.type !== 'branch') {
          throw new Error('Nodes can only be removed from branches');
        }
        children = this.attributes.children;
      } else {
        node = this;
        children = this.parent.attributes.children;
      }
      if ((idx = children.indexOf(node)) >= 0) {
        children.splice(idx, 1)[0];
        if (children.length === 1) {
          children[0].demote();
        }
      }
      return this;
    };

    DataContextNode.prototype.demote = function() {
      var grand, node;
      if (this.root) {
        return false;
      }
      if (this.parent.root) {
        if (this.siblings().length === 0) {
          this.parent.clear({
            silent: true
          });
          this.parent.set(this.attributes);
          return this.parent;
        }
        return false;
      }
      node = this.parent.remove(this);
      grand = this.parent.parent;
      grand.attributes.children.push(node);
      return this;
    };

    DataContextNode.prototype.promote = function() {
      var children, nodes, type,
        _this = this;
      type = arguments[0], nodes = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (type !== 'and' && type !== 'or') {
        throw new Error('Type must be "and" or "or"');
      }
      if (nodes.length === 0) {
        throw new Error('At least one other node must be supplied');
      }
      children = _.map([this.toJSON()].concat(__slice.call(nodes)), function(attrs) {
        return DataContextNode.parseAttrs(attrs, _this);
      });
      this.clear({
        slient: true
      });
      this.set({
        type: type,
        children: children
      });
      return this;
    };

    DataContextNode.prototype.add = function() {
      var nodes,
        _this = this;
      nodes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.type !== 'branch') {
        throw new Error('Node is not a branch. Use "promote" to convert it into one');
      }
      this.attributes.children.push.apply(this.attributes.children, _.map(nodes, function(attrs) {
        return DataContextNode.parseAttrs(attrs, _this);
      }));
      return this;
    };

    return DataContextNode;

  })(Backbone.Model);
  DataContextNode.parseAttrs = function(attrs, parent) {
    var children, node, _ref;
    if (!attrs) {
      node = new DataContextNode;
    } else if (attrs instanceof DataContextNode) {
      node = attrs;
    } else if (attrs.type === 'and' || attrs.type === 'or' && ((_ref = attrs.children) != null ? _ref.length : void 0) >= 2) {
      node = new DataContextNode({
        type: attrs.type
      });
      children = _.map(attrs.children, function(_attrs) {
        return DataContextNode.parseAttrs(_attrs, node);
      });
      node.set({
        children: children
      });
      node.type = 'branch';
    } else if (attrs.operator && attrs.id && attrs.value !== void 0) {
      node = new DataContextNode(attrs);
      node.type = 'condition';
    } else if (attrs.composite === true && attrs.id) {
      node = new DataContextNode(attrs);
      node.type = 'composite';
    } else {
      throw new Error('Unknown node type');
    }
    if (parent) {
      node.parent = parent;
      delete node.root;
    } else {
      node.root = true;
    }
    return node;
  };
  DataContext = (function(_super) {

    __extends(DataContext, _super);

    function DataContext() {
      return DataContext.__super__.constructor.apply(this, arguments);
    }

    DataContext.prototype.url = function() {
      if (this.isNew()) {
        return DataContext.__super__.url.apply(this, arguments);
      } else {
        return this.get('url');
      }
    };

    DataContext.prototype.parse = function(response) {
      if (response) {
        this.node = DataContextNode.parseAttrs(response.json);
      }
      return response;
    };

    DataContext.prototype.toJSON = function() {
      var attrs;
      attrs = DataContext.__super__.toJSON.apply(this, arguments);
      if (this.node) {
        attrs.json = this.node.toJSON();
      }
      return attrs;
    };

    return DataContext;

  })(Backbone.Model);
  DataContexts = (function(_super) {

    __extends(DataContexts, _super);

    function DataContexts() {
      return DataContexts.__super__.constructor.apply(this, arguments);
    }

    DataContexts.prototype.model = DataContext;

    DataContexts.prototype.getSession = function() {
      return (this.filter(function(model) {
        return model.get('session');
      }))[0];
    };

    return DataContexts;

  })(Backbone.Collection);
  return {
    DataContextNode: DataContextNode,
    DataContext: DataContext,
    DataContexts: DataContexts
  };
});
