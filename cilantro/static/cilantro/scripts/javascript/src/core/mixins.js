// Generated by CoffeeScript 1.3.3

define(['jquery', 'underscore'], function($, _) {
  var Deferrable, addOnceDeferreds;
  addOnceDeferreds = function(obj) {
    var args, func, name, _ref, _ref1, _results;
    _ref = obj._deferred.once;
    _results = [];
    for (name in _ref) {
      _ref1 = _ref[name], func = _ref1[0], args = _ref1[1];
      _results.push(obj._deferred.done((function(args) {
        return func.apply(null, args);
      })(args)));
    }
    return _results;
  };
  Deferrable = {
    deferred: {},
    initialize: function() {
      var func, method, once, _ref, _results,
        _this = this;
      this.pending();
      _ref = this.deferred;
      _results = [];
      for (method in _ref) {
        once = _ref[method];
        func = this[method];
        _results.push(this[method] = function() {
          return _this.defer(method, func, once, arguments);
        });
      }
      return _results;
    },
    pending: function() {
      (this._deferred = $.Deferred()).once = {};
      return this;
    },
    defer: function(name, func, once, args) {
      if (once == null) {
        once = false;
      }
      if (!(this._deferred != null)) {
        this.pending();
      }
      if (_.isString(name)) {
        if (_.isBoolean(func)) {
          once = func;
          func = this[name];
        }
        if (once && this._deferred.state() === 'pending') {
          this._deferred.once[name] = [func, args];
          return this;
        }
      } else {
        func = name;
      }
      this._deferred.done(function() {
        return func.apply(null, args);
      });
      return this;
    },
    resolve: function(context) {
      if (context == null) {
        context = this;
      }
      if (this._deferred) {
        addOnceDeferreds(this);
        this._deferred.resolveWith(context);
      }
      return this;
    },
    reject: function(context) {
      if (context == null) {
        context = this;
      }
      if (this._deferred) {
        addOnceDeferreds(this);
        this._deferred.rejectWith(context);
      }
      return this;
    },
    promise: function() {
      var _ref;
      if (!(this._deferred != null)) {
        this.pending();
      }
      return (_ref = this._deferred).promise.apply(_ref, arguments);
    },
    when: function(func) {
      return $.when(this).done(func);
    },
    state: function() {
      return this._deferred.state();
    }
  };
  Deferrable.resolveWith = Deferrable.resolve;
  Deferrable.rejectWith = Deferrable.reject;
  return {
    Deferrable: Deferrable
  };
});
